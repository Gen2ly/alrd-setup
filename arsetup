#!/usr/bin/bash
# Live medium basic configuration setup

# Firstboot test (make sure to only run once automatically)
ranfile=/tmp/"${0##*/}".hasrun
if [ "$1" = "--firstboot" -a -f "$ranfile" ]; then
  exit 1; fi

# Help
if [ "$1" = "-h" -o "$1" = "--help" -o $# -gt 1 ]; then
  echo ""${0##*/}" - setup a live mediums basic settings"
  exit 1; fi 

# Root access required
if [ "$EUID" != 0 ]; then
  echo "Root access required"
  exit 1; fi

# Keyboard layout
keymapcur=$(localectl status | grep -o "VC.*$" | cut -d " " -f3)
PS3="Keyboard layout to use ("$keymapcur"): "
select keymap in $(localectl list-keymaps); do
    test -n "$keymap" && break
    echo "Select 1, 2..."
  done
if [ "$keymap" != "$keymapcur" ]; then
  localectl set-keymap --no-convert "$keymap"
  echo "Keyboard layout set: "$keymap""; fi

# Locale, time zone, password
systemd-firstboot --prompt-locale --prompt-timezone --prompt-root-password

# RTC time standard define
if grep -sq Local /etc/adjtime; then    # system time standard obtain
  STS=Local; else
  STS=UTC  ; fi
while true; do
  read -p "RTC time standard is UTC or Local? ("$STS") ["$STS"]: " HTS
  [ "$HTS" = "" ] && HTS=$STS
  case $HTS in
    UTC|utc   ) if [ "$HTS" != "$STS" ]; then
                  timedatectl set-local-rtc 0
                  echo "RTC time standard set: "$HTS""
                fi
                break ;;
    [L,l]ocal ) if [ "$HTS" != "$STS" ]; then
                  timedatectl set-local-rtc 1
                  echo "RTC time standard set: "$HTS""
                fi
                break ;;
    * )         echo "Answer UTC or Local." ;;
  esac; done

# Time zone
#while true; do
#  timezone=$(timedatectl status | grep -o "Time zone.*$" | awk '{print $3}')
#  read -p "Time zone correct? ("$timezone") [y]: " yn
#  [ -z "$yn" ] && yn=y
#  case $yn in
#    [Yy]es|Y|y )  break ;;
#    [Nn]o|N|n  )  PS3="Time zone to use ($timezone): "
#                  select timezone in $(timedatectl list-timezones); do
#                    test -n "$timezone"; done
#                  timedatectl set-timezone "$timezone"
#                  echo "Time zone set."
#                  break ;;
#    *          )  echo "Answer yes, or no." ;;
#  esac; done

# Time and date
while true; do
  export timedate="$(timedatectl | head -n1 | sed 's/^.*Local time: //')"
  read -p "Local time correct? ($(printf '%s' "$timedate")) [y]: " yn
  [ -z "$yn" ] && yn=y
  case $yn in
    [Yy]es|Y|y )  break                     ;;
    [Nn]o|N|n  )  timeoff=yes && break      ;;
    *          )  echo "Answer yes, or no." ; esac; done

# Time set
if [ "$timeoff" ]; then
  while true; do
    read -p "Time set? (Manual/NTP/No) [Manual]: " timesettype
    [ -z "$timesettype" ] && timesettype=Manual
    case $timesettype in
      [Mm]anual ) read -p "Time enter (YYYY-MM-DD hh:mm:ss): " timemanual
                  timedatectl set-time "$timemanual" && break ;;
      NTP|ntp   ) if curl -Is https://www.archlinux.org -o /tmp/url-head; then
                    ntpd -q && echo "Time set by NTP."
                  else
                    echo "Time set by NTP requires network connection."; fi
                  break ;;
      *         ) break ;;
    esac; done; fi

# Finishup: MOTD generate, clear, hasrun file generate
if [ "$1" = "--firstboot" ]; then
  if ! [ -s "/etc/motd" ]; then
echo "Arch Rescue 0.86 - Restaurant at the End of the Universe
  • arsetup - live medium basic configuration setup (run at first login).
  • armrr   - pacman mirrorlist generator downloader (ranked mirrors).
  • ardoc   - about the live medium and general install notes." >| /etc/motd
  fi
  clear && cat /etc/motd
  # Ran file 
  touch "$ranfile"
fi

# vim:set syn=sh ts=2 sw=2 et: